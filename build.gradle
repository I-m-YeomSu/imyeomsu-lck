plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'jacoco'
	id 'com.github.kt3k.coveralls' version '2.12.2'
}

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

jacoco {
	toolVersion = "0.8.12"
	//reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

test {
	finalizedBy jacocoTestReport // report is always generated after tests run

	ignoreFailures = true

}

jacocoTestReport {
	reports {
		xml.required.set(true)  // github actions 에서 사용하기 위해 리포트를 xml 파일 생성
		html.required.set(true) // 우리가 읽을 수 있는 html 파일 리포트 생성

////		// QueryDSL Q클래스 제외 (커버리지를 측정할 필요가 없는 클래스 제외)
////		def Qdomains = []
////		for (qPattern in "**/QA".."**/QZ") {
////			Qdomains.add(qPattern + "*")
////		}
////
////		afterEvaluate {
////			classDirectories.setFrom(files(classDirectories.files.collect {
////				fileTree(dir: it,
////						exclude: [] + Qdomains)
////			}))
////		}

		xml.destination file("${buildDir}/jacoco/index.xml")   // `build` 디렉토리에 리포트 파일 생성
		html.destination file("${buildDir}/jacoco/index.html")

		//xml.destination layout.buildDirectory.dir("/jacoco/index.xml").get().asFile
		//html.destination layout.buildDirectory.dir("/jacoco/index.xml").get().asFile
	}

}

coveralls {
	jacocoReportPath 'build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'
}

dependencies {

	//시큐리티는 나중에 작업할게!
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	//implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// https://mvnrepository.com/artifact/jakarta.persistence/jakarta.persistence-api
	implementation group: 'jakarta.persistence', name: 'jakarta.persistence-api', version: '3.1.0'

	//implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	compileOnly 'org.projectlombok:lombok'
	//developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	//testImplementation 'org.springframework.security:spring-security-test'

	// https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-starter-webmvc-ui
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
	implementation 'javax.xml.bind:jaxb-api:2.3.1'

	// querydsl
	implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

}

// querydsl generated 경로 설정
def querydslDir = "build/generated/querydsl"

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslDir)
}

clean {
	delete file(querydslDir)
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}
